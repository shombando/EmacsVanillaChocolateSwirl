#+TITLE: Emacs Vanilla Chocolate Swirl Literate Config

* Introduction 
This was inspired by a discussion on the [[https://lists.gnu.org/archive/html/emacs-devel/2020-09/msg00340.html][emacs mailing list]] and as a new user (less than 6 months at the time of writing) creating a config was the best way for me to contribute to the conversation. Therefore, this is an attempt to create a literate config that can be presented as an option to a user migrating from "modern" editors/IDEs. The goal is to provide "sane" defaults and fresher UI to flatten the learning curve. Vanilla Emacs with just a little swirl of smoothness.

* Packages
I will be using a few packages that don't ship with Emacs. I'll be using ~use-package~ as a package manager. [[https://github.com/daviwil/runemacs/blob/c0266ff684f670ecc5e41615c0282912e6615214/init.el][This snippet]] was very helpful in setting up use-package minimally.

#+BEGIN_SRC emacs-lisp :noweb strip-export :tangle yes
;empty block
#+END_SRC 

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC 

* UI - Make it look less "classic"
** Coat of paint
A config by nature is personal preference but this section is even more subjective to taste. I prefer a dark-theme with no toolbar and text that doesn't run all the way to the edges.

#+BEGIN_SRC emacs-lisp 
(load-theme 'wombat)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(set-fringe-mode 15) 
(global-visual-line-mode 1)
#+END_SRC

** Visual Functionality
Features like line-numbers and spell-check being enabled are fairly standard with modern editors. Emacs does syntax-highlighting by default but not spell-check (which I think is syntax highlighting for prose).

#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

While this is not strictly necessary I think using literate programming to walk new users through building their own config could be a helpful tool. Being able to export that org file as html right off the bat might be a "wow" factor for the user to show with the uninitiated. Org-mode supports HTML export natively but syntax highlighting is added through ~htmlize.el~.

#+BEGIN_SRC emacs-lisp
(use-package htmlize)
(setq org-src-fontify-natively t)
#+END_SRC

Modeline (status bar) allows for both information dissemination as well as context based interaction. The one used by the ~doom~ package which in-turn is inspired by the Atom text editor is visually appealing and helpful due to being context aware.

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+END_SRC

* UX - Keep user long enough to discover things
  The keybindings for Emacs are different than what a lot of people coming from VS Code / Sublime / Notepad++ would expect. Not being able to cut/copy/paste and undo/redo with familiar keys and in predictable manner creates a steeper learning curve without significant value.

** CUA and friends
CUA mode takes care of most of these needs but I find myself reaching for ~CTRL+s~ and ~CTRL+o~ and ~SHFT+CTRL+p~ (Sublime command palette) often so they are the friends. 
Note: I'm using the ~CTRL-~ notation instead of Emacs ~C-~ notation to emphasize the mindset of this transitioning user. 

It turns out that simulating a GUI action for File -> Open is a little more involved than just calling ~find-file~, [[https://stackoverflow.com/questions/26483918/bind-file-open-file-with-gui-dialog-to-c-o-as-global-set-key#26484229][this thread]] has a good explanation.

#+NAME: execute-last
#+BEGIN_SRC emacs-lisp :tangle no
(cua-mode 1)
(global-set-key (kbd "C-s") 'save-buffer)
(global-set-key (kbd "C-S-p") 'execute-extended-command)

(global-set-key (kbd "C-o") 'menu-find-file-existing)
(defadvice find-file-read-args (around find-file-read-args-always-use-dialog-box act)
  "Simulate invoking menu item as if by the mouse; see `use-dialog-box'."
 (let ((last-nonmenu-event nil))
       ad-do-it))
#+END_SRC

** Undo and Redo
This is where I struggle to suggest that Emacs' more powerful undo system shouldn't be presented to the transitioning user but there's a reason there are so many popular undo/redo packages. I feel that ~undo-fu.el~ has the best approach to this and provides expected behavior to the transitioning user without neutering Emacs.

#+BEGIN_SRC emacs-lisp
(use-package undo-fu
  :after evil-collection
  :config
  ;(global-undo-tree-mode -1)
  :bind (("C-z" . undo-fu-only-undo)
         ("C-S-z" . undo-fu-only-redo)))
#+END_SRC

* Additional Packages
Here is a collection of other packages that are helpful for various types of workflows.
** Dumb Jump
Dumb Jump implements a simple and hassle-free "Go To Definition" functionality, using either ~rg~, ~ag~ or ~grep~, as well as ~git~ when possible. Given it's dependencies already exist in most UNIX systems, it's a great addition that "just works".

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :init (progn
          (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)))
#+END_SRC

You can then use ~M-.~ to go to a reference definition using ~xref-find-definitions~. You can use ~M-,~ to go back using ~xref-pop-marker-stack~.

** which-key
As a newbie, it is difficult to remember all the keybindings. And I do not think that anyone needs to remember all of them. Here is where [[https://github.com/justbur/emacs-which-key][which-key]] package comes into picture. It is an [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Minor-Modes.html#:~:text=A%20minor%20mode%20is%20an,off%20(disabled)%20in%20others.][Emacs Minor Mode]], that displays the key bindings following your currently entered incomplete command (a prefix). 

#+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode))
#+END_SRC

We just told Emacs use-package to make sure that which-key is installed (=:ensure t=), if it is not already installed. Also, we told Emacs that once the package is installed and loaded, activate the =which-key-mode=.

** magit
[[https://magit.vc/][magit]] is a git porcelain. It provides an intuitive, key-chord based interface for Git and makes version control convenient.
To improve Emacs startup time, we can use =use-package='s =:defer t= feature to load magit only when it is called.
Since it is used so often, we also give the command its own keybinding.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind
  ("C-x g" . magit-status))
#+END_SRC

** try
[[https://github.com/larstvei/Try][try]] is a package to try out packages without installing them. The packages persist for the current Emacs session, and you can always install them if you like.
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

** evil-mode
If you're coming from vim or want to try out modal editing, evil-mode is a great place to start.
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

(use-package evil-leader
  :ensure t
  :config
  (global-evil-leader-mode)
  (evil-leader/set-leader "<SPC>"))

(evil-leader/set-key
  "." 'find-file
  "b" 'switch-to-buffer
  "k" 'kill-buffer
  "w" 'delete-other-windows)
#+End_SRC 
 

** doom-themes
If you want the look of =doom-emacs= without the entire distribution, the doom themes are available as their own package. I personally prefer the doom-one theme which ties everything nicely together.
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :init (load-theme 'doom-one t))
#+END_SRC

** Work in Progress
I plan to add the following concepts/packages in no priority order
*** treemacs
*** vc-gutter
*** multiple-cursors
*** completion: helm/ivy
*** code completion
Go straight to lsp? Is there value in having company?
* Execute Last
Any keybinds or configurations that might get overwritten can be specified with =execute-last= and we'll run those here.

#+BEGIN_SRC emacs-lisp :noweb strip-export :tangle yes 
;Tangle all sections marked execute-last
<<execute-last>>
#+END_SRC
